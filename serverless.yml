# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: basic-serverless-lambda
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

custom :
  bucket : ivms-pdf-test
  ACCESS_KEY_ID : ASIAVJEIAYXPN3GQKTP2
  SECRET_ACCESS_KEY: /KrDUZDyoHgjDip1n1h2yglZUdKUelsPxtF8cmya

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  # iam:
  #   role:
  #     statements:
  #       - Effect: Allow
  #         Action:
  #           - s3:PutObject
  #           - s3:PutObjectAcl
  #         Resource: "arn:aws:s3:::${self:custom.bucket}/*"
  # envi

plugins:
  - serverless-offline
  - serverless-plugin-chrome
package:
  exclude:
    - node_modules/puppeteer/.local-chromium

functions:
  printPDF:
    handler: src/getPdfContent.printPDF
    events:
      - httpApi:
          path: /users/created
          method: POST
    environment:
      ACCESS_KEY_ID: ${self:custom.ACCESS_KEY_ID}
      SECRET_ACCESS_KEY: ${self:custom.SECRET_ACCESS_KEY}
  mergePDF:
    handler: src/getPdfContent.mergePDF
    events:
      - httpApi:
          path: /users/merged
          method: GET
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
   NewResource:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: ${self:custom.bucket}

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
